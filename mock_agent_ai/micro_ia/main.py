# mock-agent-AI/micro_ia/main.py

from fastapi import FastAPI, Request, HTTPException
from pydantic import BaseModel
import logging

app = FastAPI(
    title="ü§ñ Microservicio de IA",
    description="Simula una IA bancaria que responde a preguntas generales del usuario.",
    version="1.1.0"
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("micro_ia")

VALID_TOKEN = "secreto123"

class Pregunta(BaseModel):
    pregunta: str

    class Config:
        json_schema_extra = {
            "example": {
                "pregunta": "¬øQu√© tipo de inter√©s tiene la hipoteca?"
            }
        }

# Base de conocimientos simulada
RESPUESTAS_IA = {
    "hipoteca": "Actualmente el tipo de inter√©s para hipotecas es del 3,2%.",
    "tarjeta": "Puedes solicitar una tarjeta desde la app o acudiendo a una oficina.",
    "transferencia": "Una transferencia nacional tarda aproximadamente 24h h√°biles.",
    "comisi√≥n": "La comisi√≥n de mantenimiento es de 10‚Ç¨ trimestrales, pero puede eliminarse cumpliendo ciertos requisitos.",
    "oficina": "Nuestro horario de atenci√≥n en oficinas es de lunes a viernes de 8:30 a 14:00.",
    "certificado": "Puedes descargar tu certificado de titularidad bancaria desde la app o el √°rea de cliente web.",
    "pr√©stamo": "Ofrecemos pr√©stamos personales desde un 5,5% TIN con aprobaci√≥n r√°pida online.",
    "inversi√≥n": "Contamos con planes de inversi√≥n adaptados a tu perfil de riesgo, consulta con tu asesor."
}

@app.middleware("http")
async def validar_token(request: Request, call_next):
    rutas_publicas = ["/token", "/docs", "/openapi.json"]
    if any(request.url.path.startswith(r) for r in rutas_publicas):
        return await call_next(request)

    auth = request.headers.get("Authorization")
    if not auth or auth != f"Bearer {VALID_TOKEN}":
        raise HTTPException(status_code=401, detail="Token inv√°lido o no proporcionado")

    return await call_next(request)

@app.post("/respuesta", tags=["üß† IA Bancaria"], summary="Consulta general a la IA")
async def responder(pregunta: Pregunta):
    """
    Devuelve una respuesta simulada seg√∫n la palabra clave detectada en la pregunta.

    Palabras clave soportadas:
    - hipoteca
    - tarjeta
    - transferencia
    - comisi√≥n
    - oficina
    - certificado
    - pr√©stamo
    - inversi√≥n

    Si no se encuentra ninguna coincidencia, responde con un mensaje gen√©rico.
    """
    texto = pregunta.pregunta.lower()
    logger.info(f"[IA] Pregunta recibida: {texto}")

    for clave, respuesta in RESPUESTAS_IA.items():
        if clave in texto:
            return {"respuesta": respuesta}

    return {"respuesta": "Lo siento, no tengo informaci√≥n sobre eso en este momento."}
